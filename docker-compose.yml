version: "3.7"

services:
  # PostgreSQL Database - Required for ChatAPI data persistence
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  # Redis - Required for ChatAPI pub/sub and caching
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # ChatAPI - Main application with bundled workers
  chatapi:
    image: "${DOCKER_IMAGE_CHATAPI:-chatapi/chatapi}:${TAG:-latest}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - DATABASE_URL=postgresql://${POSTGRES_USER?Variable not set}:${POSTGRES_PASSWORD?Variable not set}@db:5432/${POSTGRES_DB?Variable not set}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN:-}
    ports:
      - "${HOST_PORT:-8000}:8000" # Exposing the Chat API on port 8000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8000/api/v1/utils/health-check/",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./

volumes:
  app-db-data:
  redis-data:
